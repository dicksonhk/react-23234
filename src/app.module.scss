%card {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  padding: var(--card-padding);
  border-radius: var(--card-border-radius);
  background-color: var(--card-background-color);
}

%card--large {
  --card-padding: var(--card-padding--large);
  --card-border-radius: var(--card-border-radius--large);
}

%card--compat {
  --card-padding: var(--card-padding--compat);
}

@mixin use-color {
  color: rgba(var(--color--rgb), var(--color--alpha));
}

:local {
  .configItem {
    @extend %card;
    @extend %card--compat;

    --transition-duration: 250ms;
    --switch-transition-duration: var(--transition-duration);
    --switch-color-track: rgba(255, 255, 255, 0.05);
    --switch-color-track-border: rgba(255, 255, 255, 0.1);

    $input-height: 2rem;

    $this: ".configItem";

    position: relative;
    padding-bottom: 0;
    background: none;
    line-height: 1;

    &::before,
    &::after {
      position: absolute;
      display: block;
      content: "";
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      border-radius: inherit;
      pointer-events: none;
    }

    &::before {
      background-color: var(--card-background-color);
    }

    &::after {
      border: 2px solid var(--card-background-color);
    }

    label {
      cursor: pointer;
    }

    &__header {
      padding-bottom: var(--card-padding);
    }

    &__body {
      overflow: hidden;

      > * {
        &:first-child {
          padding-top: calc(var(--card-padding) * 0.5);
        }

        &:last-child {
          padding-bottom: calc(var(--card-padding) * 1.5);
        }
      }
      // border-top: solid 1px rgba(var(--color--rgb), 0.5);
    }

    &__toggle {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--card-padding);
      margin: calc(-1 * var(--card-padding));
    }

    &__value {
      display: grid;
      grid-auto-flow: column;
      align-items: center;
      gap: 0.5em;
      justify-content: start;
      box-sizing: content-box;
      height: $input-height;

      --color--alpha: 0.65;

      @include use-color;

      font-family: monospace;
    }

    &__value__stringInput {
      background-color: var(--card-background-color);
      border-radius: 0.25em;
      height: $input-height;
      padding: 0.5em 0.85em;
    }

    &__value__booleanInput {
      display: grid;
      grid-auto-flow: column;
      align-items: center;
      gap: 0.5em;
      height: $input-height * 0.8625;
      padding: 0.25em 0.75em;
      background-color: var(--card-background-color);
      box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
      border-radius: 0.25em;

      input[type="checkbox"] {
        opacity: var(--color--alpha);
        // filter: invert(1) hue-rotate(180deg);
        margin: calc(-1 * var(--line-height) * 0.5em) 0;
        order: 1;

        &,
        ~ [data-true],
        ~ [data-true]::before {
          display: block;
        }

        ~ [data-true]::before {
          content: attr(data-true);
        }

        &:not(:checked) {
          // opacity: calc(var(--color--alpha) * var(--color--alpha));

          ~ [data-false]::before {
            content: attr(data-false);
          }
        }
      }
    }

    // toggle styles

    &::before,
    &::after,
    &__body {
      will-change: var(--transition-property);
      transition-property: var(--transition-property);
      transition-duration: var(--transition-duration);
      transition-timing-function: ease-out;
      transform: translateZ(0);
    }

    &::before,
    &::after {
      --transition-property: opacity;
    }

    &__body {
      --transition-property: max-height;
    }

    &:not([data-enabled]) {
      &::before {
        opacity: 0;
      }

      &::after {
        opacity: 1;
      }

      #{$this}__body {
        max-height: 0;
        pointer-events: none;
      }
    }

    &[data-enabled] {
      &::before {
        opacity: 1;
      }

      &::after {
        opacity: 0;
      }

      #{$this}__body {
        // max-height: ;
        max-height: calc(var(--card-padding) * 2 + #{$input-height});
      }
    }
  }

  .mainWrapper {
    > *:nth-child(1),
    > *:nth-child(2) {
      position: sticky;
      top: 0;
    }
  }

  @media screen and (min-width: 768px) {
    .mainWrapper {
      // grid-template-columns: minmax(min-content, 300px) auto;
      grid-template-columns: 1fr 2fr;

      > *:nth-child(1),
      > *:nth-child(2) {
        top: 1.5rem;
      }

      > *:nth-child(1) {
        grid-column: span 2;
      }

      > *:nth-child(2) {
        margin-bottom: auto;
      }
    }

    // .configGrid {
    //   grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    // }
  }

  @media screen and (max-width: 768px) {
    .mainWrapper {
      background-color: transparent !important;

      > *:nth-child(2) {
        box-shadow: 0 3px 12px 0 #121212;
      }
    }

    .renderedHtmlCode {
      display: none !important;
    }

    :global(#app) {
      padding: 0 !important;
    }
  }
}
